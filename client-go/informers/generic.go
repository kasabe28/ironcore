/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by informer-gen. DO NOT EDIT.

package informers

import (
	"fmt"

	v1beta1 "github.com/onmetal/onmetal-api/api/compute/v1beta1"
	corev1beta1 "github.com/onmetal/onmetal-api/api/core/v1beta1"
	ipamv1beta1 "github.com/onmetal/onmetal-api/api/ipam/v1beta1"
	networkingv1beta1 "github.com/onmetal/onmetal-api/api/networking/v1beta1"
	storagev1beta1 "github.com/onmetal/onmetal-api/api/storage/v1beta1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=compute.api.onmetal.de, Version=v1beta1
	case v1beta1.SchemeGroupVersion.WithResource("machines"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Compute().V1beta1().Machines().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("machineclasses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Compute().V1beta1().MachineClasses().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("machinepools"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Compute().V1beta1().MachinePools().Informer()}, nil

		// Group=core.api.onmetal.de, Version=v1beta1
	case corev1beta1.SchemeGroupVersion.WithResource("resourcequotas"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1beta1().ResourceQuotas().Informer()}, nil

		// Group=ipam.api.onmetal.de, Version=v1beta1
	case ipamv1beta1.SchemeGroupVersion.WithResource("prefixes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ipam().V1beta1().Prefixes().Informer()}, nil
	case ipamv1beta1.SchemeGroupVersion.WithResource("prefixallocations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ipam().V1beta1().PrefixAllocations().Informer()}, nil

		// Group=networking.api.onmetal.de, Version=v1beta1
	case networkingv1beta1.SchemeGroupVersion.WithResource("loadbalancers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1beta1().LoadBalancers().Informer()}, nil
	case networkingv1beta1.SchemeGroupVersion.WithResource("loadbalancerroutings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1beta1().LoadBalancerRoutings().Informer()}, nil
	case networkingv1beta1.SchemeGroupVersion.WithResource("natgateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1beta1().NATGateways().Informer()}, nil
	case networkingv1beta1.SchemeGroupVersion.WithResource("networks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1beta1().Networks().Informer()}, nil
	case networkingv1beta1.SchemeGroupVersion.WithResource("networkinterfaces"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1beta1().NetworkInterfaces().Informer()}, nil
	case networkingv1beta1.SchemeGroupVersion.WithResource("networkpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1beta1().NetworkPolicies().Informer()}, nil
	case networkingv1beta1.SchemeGroupVersion.WithResource("virtualips"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1beta1().VirtualIPs().Informer()}, nil

		// Group=storage.api.onmetal.de, Version=v1beta1
	case storagev1beta1.SchemeGroupVersion.WithResource("buckets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1beta1().Buckets().Informer()}, nil
	case storagev1beta1.SchemeGroupVersion.WithResource("bucketclasses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1beta1().BucketClasses().Informer()}, nil
	case storagev1beta1.SchemeGroupVersion.WithResource("bucketpools"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1beta1().BucketPools().Informer()}, nil
	case storagev1beta1.SchemeGroupVersion.WithResource("volumes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1beta1().Volumes().Informer()}, nil
	case storagev1beta1.SchemeGroupVersion.WithResource("volumeclasses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1beta1().VolumeClasses().Informer()}, nil
	case storagev1beta1.SchemeGroupVersion.WithResource("volumepools"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1beta1().VolumePools().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
