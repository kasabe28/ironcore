/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/onmetal/onmetal-api/client-go/onmetalapi"
	computev1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/compute/v1beta1"
	fakecomputev1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/compute/v1beta1/fake"
	corev1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/core/v1beta1"
	fakecorev1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/core/v1beta1/fake"
	ipamv1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/ipam/v1beta1"
	fakeipamv1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/ipam/v1beta1/fake"
	networkingv1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/networking/v1beta1"
	fakenetworkingv1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/networking/v1beta1/fake"
	storagev1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/storage/v1beta1"
	fakestoragev1beta1 "github.com/onmetal/onmetal-api/client-go/onmetalapi/typed/storage/v1beta1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var (
	_ clientset.Interface = &Clientset{}
	_ testing.FakeClient  = &Clientset{}
)

// ComputeV1beta1 retrieves the ComputeV1beta1Client
func (c *Clientset) ComputeV1beta1() computev1beta1.ComputeV1beta1Interface {
	return &fakecomputev1beta1.FakeComputeV1beta1{Fake: &c.Fake}
}

// CoreV1beta1 retrieves the CoreV1beta1Client
func (c *Clientset) CoreV1beta1() corev1beta1.CoreV1beta1Interface {
	return &fakecorev1beta1.FakeCoreV1beta1{Fake: &c.Fake}
}

// IpamV1beta1 retrieves the IpamV1beta1Client
func (c *Clientset) IpamV1beta1() ipamv1beta1.IpamV1beta1Interface {
	return &fakeipamv1beta1.FakeIpamV1beta1{Fake: &c.Fake}
}

// NetworkingV1beta1 retrieves the NetworkingV1beta1Client
func (c *Clientset) NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface {
	return &fakenetworkingv1beta1.FakeNetworkingV1beta1{Fake: &c.Fake}
}

// StorageV1beta1 retrieves the StorageV1beta1Client
func (c *Clientset) StorageV1beta1() storagev1beta1.StorageV1beta1Interface {
	return &fakestoragev1beta1.FakeStorageV1beta1{Fake: &c.Fake}
}
